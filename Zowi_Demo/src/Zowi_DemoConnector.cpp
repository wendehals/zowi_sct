/* Generated by YAKINDU Statechart Tools for Arduino v0.5.0 */

#include "Zowi_DemoConnector.h"

Zowi_DemoConnector::Zowi_DemoConnector(Zowi_Demo* statemachine) {
	this->statemachine = statemachine;
	this->zowi = new Zowi("ZOWI_YAKINDU_SCT");
}

/*
 * Initialize the hardware.
 */
void Zowi_DemoConnector::init() {
	// Set the servo pins
	zowi->init(PIN_YL, PIN_YR, PIN_RL, PIN_RR, true);
	zowi->home();

	syncState();
}

/*
 * Raise state machine events before processing them in the state machine's runCycle().
 */
void Zowi_DemoConnector::raiseEvents() {
	if (obstacleDetected()) {
		statemachine->raise_obstacleDetected();
	}
	if (noiseDetected()) {
		statemachine->raise_noiseDetected();
	}
}

/*
 * Update the hardware depending on the state machine's state.
 */
void Zowi_DemoConnector::syncState() {
	if (statemachine->get_awake()) {
		zowi->putMouth(happyOpen);
		zowi->setRestState(false);
	}else{
		zowi->putMouth(lineMouth);
		zowi->sing(S_sleeping);
		zowi->setRestState(true);
	}
	if (statemachine->get_welcome()) {
		zowi->putMouth(heart);
		zowi->sing(S_superHappy);
	}
	if (statemachine->get_walk()) {
		zowi->putMouth(happyOpen);
		zowi->walk(MEDIUM_SPEED, FORWARD);
	}
	if (statemachine->get_turnLeft()) {
		zowi->putMouth(smallSurprise);
		zowi->sing(S_OhOoh);
		zowi->turn(MEDIUM_SPEED, LEFT);
	}
}

/*
 * Optimize power consumption by turning off hardware modules that are not needed.
 */
uint8_t Zowi_DemoConnector::prepareSleepMode() {
	return 0;
}

bool Zowi_DemoConnector::obstacleDetected() {
	return zowi->getDistance() < 15;
}

bool Zowi_DemoConnector::noiseDetected() {
	return zowi->getNoise() > 30;
}
